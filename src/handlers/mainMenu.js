const User = require('../models/User');
const heroTranslations = require('../constants/heroes');

module.exports = async (bot, msg, query) => {
  const chatId = msg.chat.id;
  const data = query ? query.data : null;
  const user = await User.findOne({ telegramId: chatId.toString() });

  if (!user) {
    bot.sendMessage(chatId, user.language === 'RU' ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.' : 'Please start with /start.');
    return;
  }

  try {
    if (data === 'menu_profile') {
      console.log('User data:', {
        ...user.toObject(),
        trophies: user.trophies,
        valorPath: user.valorPath,
        telegramUsername: user.telegramUsername
      }); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ —Å telegramUsername
      const fields = user.language === 'RU' ?
          {
            'Telegram': user.telegramUsername || `@${user.telegramId}`,
            '–ù–∏–∫–Ω–µ–π–º': user.nickname,
            'ID –∏–≥—Ä–æ–∫–∞': user.userId,
            '–¢—Ä–æ—Ñ–µ–∏': user.trophies,
            '–ü—É—Ç—å –¥–æ–±–ª–µ—Å—Ç–∏': user.valorPath,
            '–°–∏–Ω–¥–∏–∫–∞—Ç': user.syndicate,
            '–ò–º—è': user.name,
            '–í–æ–∑—Ä–∞—Å—Ç': user.age,
            '–ü–æ–ª': user.gender,
            '–°—Ç—Ä–∞–Ω–∞': user.country,
            '–ì–æ—Ä–æ–¥': user.city
          } :
          {
            'Telegram': user.telegramUsername || `@${user.telegramId}`,
            'Nickname': user.nickname,
            'User ID': user.userId,
            'Trophies': user.trophies,
            'Valor Path': user.valorPath,
            'Syndicate': user.syndicate,
            'Name': user.name,
            'Age': user.age,
            'Gender': user.gender,
            'Country': user.country,
            'City': user.city
          };

      let profileText = user.language === 'RU' ? 'üìã –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' : 'üìã Profile\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';
      let hasFields = false;
      for (const [key, value] of Object.entries(fields)) {
        if (value !== undefined && value !== null) {
          profileText += `${key}: ${value || (user.language === 'RU' ? '–ù–µ —É–∫–∞–∑–∞–Ω–æ' : 'Not set')}\n`;
          hasFields = true;
        }
      }

      if (!hasFields) {
        profileText = user.language === 'RU' ? '‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.' : '‚ö†Ô∏è Profile is empty. Complete registration.';
      }

      bot.sendMessage(chatId, profileText, {
        reply_markup: {
          inline_keyboard: [
            [{ text: user.language === 'RU' ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' : '‚úèÔ∏è Edit', callback_data: 'profile_edit' }],
          ],
        },
      });
    } else if (data === 'menu_heroes') {
      const classes = Object.keys(heroTranslations).map(classId => ({
        id: classId,
        name: heroTranslations[classId].classNames[user.language],
      }));

      bot.sendMessage(chatId, user.language === 'RU' ? '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –≥–µ—Ä–æ–µ–≤:' : 'Select hero class:', {
        reply_markup: {
          inline_keyboard: classes.map(cls => [{ text: cls.name, callback_data: `heroes_class_${cls.id}` }]),
        },
      });
    }
  } catch (error) {
    console.error('Error in mainMenu handler:', error);
    bot.sendMessage(chatId, user.language === 'RU' ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.' : '‚ùå An error occurred.');
  }
};