const User = require('../models/User');

module.exports = async (bot, msg, query) => {
    const chatId = msg.chat.id;
    const data = query ? query.data : null;
    const user = await User.findOne({ telegramId: chatId.toString() });

    if (!user) {
        bot.sendMessage(chatId, user.language === 'RU' ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.' : 'Please start with /start.');
        return;
    }

    try {
        if (data === 'profile_edit') {
            const fieldLabels = user.language === 'RU' ?
                {
                    nickname: '–ù–∏–∫–Ω–µ–π–º',
                    userId: 'ID –∏–≥—Ä–æ–∫–∞',
                    trophies: '–¢—Ä–æ—Ñ–µ–∏',
                    valorPath: '–ü—É—Ç—å –¥–æ–±–ª–µ—Å—Ç–∏',
                    syndicate: '–°–∏–Ω–¥–∏–∫–∞—Ç',
                    name: '–ò–º—è',
                    age: '–í–æ–∑—Ä–∞—Å—Ç',
                    gender: '–ü–æ–ª',
                    country: '–°—Ç—Ä–∞–Ω–∞',
                    city: '–ì–æ—Ä–æ–¥'
                } :
                {
                    nickname: 'Nickname',
                    userId: 'User ID',
                    trophies: 'Trophies',
                    valorPath: 'Valor Path',
                    syndicate: 'Syndicate',
                    name: 'Name',
                    age: 'Age',
                    gender: 'Gender',
                    country: 'Country',
                    city: 'City'
                };

            const fields = ['nickname', 'userId', 'trophies', 'valorPath', 'syndicate', 'name', 'age', 'gender', 'country', 'city'];

            bot.sendMessage(chatId, user.language === 'RU' ? '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:' : 'Select field to edit:', {
                reply_markup: {
                    inline_keyboard: fields.map(field => [{ text: fieldLabels[field], callback_data: `profile_edit_${field}` }]),
                },
            });
        } else if (data && data.startsWith('profile_edit_')) {
            const field = data.split('_')[2];
            user.registrationStep = `edit_${field}`;
            await user.save();
            const fieldLabels = user.language === 'RU' ?
                {
                    nickname: '–ù–∏–∫–Ω–µ–π–º',
                    userId: 'ID –∏–≥—Ä–æ–∫–∞',
                    trophies: '–¢—Ä–æ—Ñ–µ–∏',
                    valorPath: '–ü—É—Ç—å –¥–æ–±–ª–µ—Å—Ç–∏',
                    syndicate: '–°–∏–Ω–¥–∏–∫–∞—Ç',
                    name: '–ò–º—è',
                    age: '–í–æ–∑—Ä–∞—Å—Ç',
                    gender: '–ü–æ–ª',
                    country: '–°—Ç—Ä–∞–Ω–∞',
                    city: '–ì–æ—Ä–æ–¥'
                } :
                {
                    nickname: 'Nickname',
                    userId: 'User ID',
                    trophies: 'Trophies',
                    valorPath: 'Valor Path',
                    syndicate: 'Syndicate',
                    name: 'Name',
                    age: 'Age',
                    gender: 'Gender',
                    country: 'Country',
                    city: 'City'
                };
            bot.sendMessage(chatId, user.language === 'RU' ? `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${fieldLabels[field]}:` : `Enter new value for ${fieldLabels[field]}:`);
        } else {
            console.log(`Profile data for user ${user.telegramId}: trophies=${user.trophies}, valorPath=${user.valorPath}`); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
            const profileText = user.language === 'RU' ?
                `üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n` +
                `–ù–∏–∫–Ω–µ–π–º: ${user.nickname || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                `ID –∏–≥—Ä–æ–∫–∞: ${user.userId || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                `–¢—Ä–æ—Ñ–µ–∏: ${user.trophies || 0}\n` +
                `–ü—É—Ç—å –¥–æ–±–ª–µ—Å—Ç–∏: ${user.valorPath || 0}\n` +
                `–°–∏–Ω–¥–∏–∫–∞—Ç: ${user.syndicate || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                `–ò–º—è: ${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                `–í–æ–∑—Ä–∞—Å—Ç: ${user.age || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                `–ü–æ–ª: ${user.gender || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                `–°—Ç—Ä–∞–Ω–∞: ${user.country || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
                `–ì–æ—Ä–æ–¥: ${user.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                `–Ø–∑—ã–∫: ${user.language === 'RU' ? '–†—É—Å—Å–∫–∏–π' : 'English'}`
                :
                `üë§ Profile\n` +
                `Nickname: ${user.nickname || 'Not set'}\n` +
                `User ID: ${user.userId || 'Not set'}\n` +
                `Trophies: ${user.trophies || 0}\n` +
                `Valor Path: ${user.valorPath || 0}\n` +
                `Syndicate: ${user.syndicate || 'Not set'}\n` +
                `Name: ${user.name || 'Not set'}\n` +
                `Age: ${user.age || 'Not set'}\n` +
                `Gender: ${user.gender || 'Not set'}\n` +
                `Country: ${user.country || 'Not set'}\n` +
                `City: ${user.city || 'Not set'}\n` +
                `Language: ${user.language === 'RU' ? 'Russian' : 'English'}`;

            bot.sendMessage(chatId, profileText, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: user.language === 'RU' ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' : '‚úèÔ∏è Edit profile', callback_data: 'profile_edit' }]
                    ]
                }
            });
        }
    } catch (error) {
        console.error('Error in profile handler:', error);
        bot.sendMessage(chatId, user.language === 'RU' ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.' : 'An error occurred.');
    }
};