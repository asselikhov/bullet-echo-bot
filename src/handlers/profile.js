const User = require('../models/User');
const { formatProfileText, getFieldLabels, handleError, clearGlobalStates } = require('../utils/helpers');
const { getMainReplyKeyboard, getMainInlineKeyboard } = require('../utils/keyboards');

const maxTextLength = 100;

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
const createProfileKeyboard = (language) => ({
    resize_keyboard: true,
    inline_keyboard: [
        [{ text: language === 'RU' ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' : '‚úèÔ∏è Edit', callback_data: 'profile_edit' }],
        [{ text: language === 'RU' ? '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' : '‚¨ÖÔ∏è Back', callback_data: 'menu_main' }]
    ]
});

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const createEditFieldsKeyboard = async (userId, language) => {
    try {
        console.log(`Creating edit fields keyboard for userId=${userId}, language=${language}`);
        const user = await User.findOne({ telegramId: userId }).lean();
        console.log(`User query result: ${JSON.stringify(user, null, 2)}`);

        const editableFields = [
            { key: 'nickname', label: language === 'RU' ? '–ù–∏–∫–Ω–µ–π–º' : 'Nickname' },
            { key: 'userId', label: language === 'RU' ? 'ID –∏–≥—Ä–æ–∫–∞' : 'Player ID' },
            { key: 'trophies', label: language === 'RU' ? '–¢—Ä–æ—Ñ–µ–∏' : 'Trophies' },
            { key: 'valorPath', label: language === 'RU' ? '–ü—É—Ç—å –¥–æ–±–ª–µ—Å—Ç–∏' : 'Valor Path' },
            { key: 'syndicate', label: language === 'RU' ? '–°–∏–Ω–¥–∏–∫–∞—Ç' : 'Syndicate' },
            { key: 'name', label: language === 'RU' ? '–ò–º—è' : 'Name' },
            { key: 'age', label: language === 'RU' ? '–í–æ–∑—Ä–∞—Å—Ç' : 'Age' },
            { key: 'gender', label: language === 'RU' ? '–ü–æ–ª' : 'Gender' },
            { key: 'country', label: language === 'RU' ? '–°—Ç—Ä–∞–Ω–∞' : 'Country' },
            { key: 'city', label: language === 'RU' ? '–ì–æ—Ä–æ–¥' : 'City' }
        ];

        const inline_keyboard = editableFields.map(field => {
            const buttons = [{ text: field.label, callback_data: `edit_${field.key}` }];
            if (field.key === 'syndicate' && user?.syndicate) {
                buttons.push({
                    text: language === 'RU' ? 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–∏–Ω–¥–∏–∫–∞—Ç' : 'üóëÔ∏è Delete Syndicate',
                    callback_data: 'delete_syndicate'
                });
            }
            return buttons;
        });

        inline_keyboard.push([{
            text: language === 'RU' ? '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' : '‚¨ÖÔ∏è Back',
            callback_data: 'menu_profile'
        }]);

        const result = {
            resize_keyboard: true,
            inline_keyboard
        };
        console.log(`Generated edit fields keyboard: ${JSON.stringify(result, null, 2)}`);
        return result;
    } catch (error) {
        console.error(`Error in createEditFieldsKeyboard for userId=${userId}:`, error.stack);
        return {
            resize_keyboard: true,
            inline_keyboard: [[{
                text: language === 'RU' ? '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' : '‚¨ÖÔ∏è Back',
                callback_data: 'menu_profile'
            }]]
        };
    }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
const createGenderKeyboard = (language) => ({
    resize_keyboard: true,
    inline_keyboard: [
        [
            { text: language === 'RU' ? '–ú' : 'M', callback_data: 'gender_M' },
            { text: language === 'RU' ? '–ñ' : 'F', callback_data: 'gender_F' }
        ],
        [{ text: language === 'RU' ? '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' : '‚¨ÖÔ∏è Back', callback_data: 'profile_edit' }]
    ]
});

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
const validateText = (text, field, language) => {
    if (!text || text.length < 1) {
        return language === 'RU' ? `${field} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.` : `${field} cannot be empty.`;
    }
    if (text.length > maxTextLength) {
        return language === 'RU' ? `${field} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.` : `${field} is too long.`;
    }
    return null;
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
const validateNumber = (text, field, language) => {
    const value = parseInt(text, 10);
    if (isNaN(value) || value < 0) {
        return language === 'RU' ? `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è ${field}.` : `Please enter a positive number for ${field}.`;
    }
    return value;
};

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
const profileHandler = async (bot, ctx, params, user) => {
    if (!ctx || !user || !params) {
        console.error('Invalid parameters in profile handler:', { ctx, user, params });
        return {
            text: 'Internal error: Invalid parameters.',
            reply_markup: { inline_keyboard: [] }
        };
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback-–∑–∞–ø—Ä–æ—Å–∞
    if (ctx.callbackQuery) {
        await ctx.answerCbQuery();
    }

    const data = params.data || '';
    const userId = ctx.from.id.toString();
    const messageId = ctx.message?.message_id || ctx.callbackQuery?.message?.message_id;
    const text = ctx.message?.text?.trim();
    const language = user.language || 'RU';

    console.log(`Profile handler: userId=${userId}, data=${data}, message_id=${messageId}, text="${text}"`);

    try {
        const updatedUser = await User.findOne({ telegramId: userId }).lean();
        if (!updatedUser) {
            console.error(`User not found: userId=${userId}`);
            return {
                text: language === 'RU' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.' : 'User not found.',
                reply_markup: {
                    inline_keyboard: getMainInlineKeyboard(language)
                }
            };
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        if (data === 'menu_profile') {
            const profileText = formatProfileText(updatedUser, language);
            console.log(`Returning profile for userId=${userId}`);
            return {
                text: profileText,
                reply_markup: createProfileKeyboard(language),
                parse_mode: 'HTML'
            };
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (data === 'profile_edit') {
            console.log(`Showing edit fields for userId=${userId}`);
            return {
                text: language === 'RU' ? '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:' : 'Select a field to edit:',
                reply_markup: await createEditFieldsKeyboard(userId, language)
            };
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∏–Ω–¥–∏–∫–∞—Ç–∞
        if (data === 'delete_syndicate') {
            console.log(`Deleting syndicate for userId=${userId}`);
            await User.updateOne(
                { telegramId: userId },
                { syndicate: null, updatedAt: new Date() }
            );
            clearGlobalStates(userId);
            console.log(`Syndicate deleted for userId=${userId}, returning edit fields`);
            return {
                text: language === 'RU'
                    ? `‚úÖ –°–∏–Ω–¥–∏–∫–∞—Ç —É–¥–∞–ª—ë–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`
                    : `‚úÖ Syndicate deleted! Select a field to edit:`,
                reply_markup: await createEditFieldsKeyboard(userId, language),
                parse_mode: 'HTML'
            };
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (data.startsWith('edit_')) {
            const field = data.replace('edit_', '');
            const validFields = ['nickname', 'userId', 'trophies', 'valorPath', 'syndicate', 'name', 'age', 'gender', 'country', 'city'];
            if (!validFields.includes(field)) {
                throw new Error(`Invalid field: ${field}`);
            }

            if (field === 'gender') {
                console.log(`Showing gender selection for userId=${userId}`);
                return {
                    text: language === 'RU' ? '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:' : 'Select gender:',
                    reply_markup: createGenderKeyboard(language)
                };
            }

            global.editingProfileState = global.editingProfileState || {};
            global.editingProfileState[userId] = { field };
            const fieldLabels = getFieldLabels(language);
            const label = fieldLabels[field] || field;

            let promptText = language === 'RU' ? `–í–≤–µ–¥–∏—Ç–µ ${label}:` : `Enter ${label}:`;
            if (['trophies', 'valorPath', 'age'].includes(field)) {
                promptText += language === 'RU' ? ' (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)' : ' (integer)';
            } else if (field === 'userId') {
                promptText += language === 'RU' ? ' (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 5X5R8ZN)' : ' (letters and numbers, e.g., 5X5R8ZN)';
            }

            console.log(`Prompting for field=${field}, userId=${userId}`);
            return {
                text: promptText,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: language === 'RU' ? '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' : '‚¨ÖÔ∏è Back', callback_data: 'profile_edit' }]
                    ]
                }
            };
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
        if (data === 'gender_M' || data === 'gender_F') {
            const gender = language === 'RU'
                ? (data === 'gender_M' ? '–ú' : '–ñ')
                : (data === 'gender_M' ? 'M' : 'F');
            console.log(`Updating gender to ${gender} for userId=${userId}`);
            await User.updateOne(
                { telegramId: userId },
                { gender, updatedAt: new Date() }
            );
            clearGlobalStates(userId);
            console.log(`Gender updated to ${gender} for userId=${userId}, returning edit fields`);
            return {
                text: language === 'RU'
                    ? `‚úÖ –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`
                    : `‚úÖ Field updated! Select a field to edit:`,
                reply_markup: await createEditFieldsKeyboard(userId, language),
                parse_mode: 'HTML'
            };
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö/—á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if (text && global.editingProfileState?.[userId]?.field) {
            const field = global.editingProfileState[userId].field;
            const fieldLabels = getFieldLabels(language);
            const label = fieldLabels[field] || field;
            let updateData = { updatedAt: new Date() };

            switch (field) {
                case 'nickname':
                case 'userId':
                case 'name':
                case 'country':
                case 'city': {
                    const validationError = validateText(text, label, language);
                    if (validationError) {
                        console.log(`Validation error for ${field}: ${validationError}, userId=${userId}`);
                        return {
                            text: validationError,
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: language === 'RU' ? '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' : '‚¨ÖÔ∏è Back', callback_data: 'profile_edit' }]
                                ]
                            }
                        };
                    }
                    updateData[field] = text;
                    break;
                }
                case 'trophies':
                case 'age': {
                    const value = validateNumber(text, label, language);
                    if (typeof value === 'string') {
                        console.log(`Validation error for ${field}: ${value}, userId=${userId}`);
                        return {
                            text: value,
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: language === 'RU' ? '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' : '‚¨ÖÔ∏è Back', callback_data: 'profile_edit' }]
                                ]
                            }
                        };
                    }
                    updateData[field] = value;
                    break;
                }
                case 'valorPath': {
                    if (text.toLowerCase() === (language === 'RU' ? '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' : 'skip')) {
                        updateData.valorPath = null;
                    } else {
                        const value = validateNumber(text, label, language);
                        if (typeof value === 'string') {
                            console.log(`Validation error for ${field}: ${value}, userId=${userId}`);
                            return {
                                text: value,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: language === 'RU' ? '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' : '‚¨ÖÔ∏è Back', callback_data: 'profile_edit' }]
                                    ]
                                }
                            };
                        }
                        updateData.valorPath = value;
                    }
                    break;
                }
                case 'syndicate': {
                    if (text.toLowerCase() === (language === 'RU' ? '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' : 'skip')) {
                        updateData.syndicate = null;
                    } else {
                        const validationError = validateText(text, label, language);
                        if (validationError) {
                            console.log(`Validation error for ${field}: ${validationError}, userId=${userId}`);
                            return {
                                text: validationError,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: language === 'RU' ? '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' : '‚¨ÖÔ∏è Back', callback_data: 'profile_edit' }]
                                    ]
                                }
                            };
                        }
                        updateData.syndicate = text;
                    }
                    break;
                }
            }

            console.log(`Updating field ${field} to ${updateData[field]} for userId=${userId}`);
            await User.updateOne({ telegramId: userId }, updateData);
            clearGlobalStates(userId);
            console.log(`Field ${field} updated for userId=${userId}, returning edit fields`);
            const keyboard = await createEditFieldsKeyboard(userId, language);
            console.log(`Response keyboard after update: ${JSON.stringify(keyboard, null, 2)}`);
            return {
                text: language === 'RU'
                    ? `‚úÖ –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`
                    : `‚úÖ Field updated! Select a field to edit:`,
                reply_markup: keyboard,
                parse_mode: 'HTML'
            };
        }

        console.warn(`Unknown profile data: ${data}, userId=${userId}`);
        return {
            text: language === 'RU' ? '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:' : 'Use the menu below:',
            reply_markup: {
                inline_keyboard: getMainInlineKeyboard(language)
            }
        };
    } catch (error) {
        console.error(`Error in profile handler: userId=${userId}, data=${data}`, error.stack);
        return {
            text: language === 'RU' ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.' : 'An error occurred.',
            reply_markup: {
                inline_keyboard: getMainInlineKeyboard(language)
            }
        };
    }
};

module.exports = profileHandler;
module.exports.createEditFieldsKeyboard = createEditFieldsKeyboard;