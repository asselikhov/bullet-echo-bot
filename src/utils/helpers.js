const User = require('../models/User');
const Hero = require('../models/Hero');
const { getMainReplyKeyboard } = require('./keyboards');
const motivations = require('../constants/motivations');

// –û—á–∏—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const clearGlobalStates = (userId) => {
  if (global.editingProfileState?.[userId]) delete global.editingProfileState[userId];
  if (global.searchState?.[userId]) delete global.searchState[userId];
  if (global.editingState?.[userId]) delete global.editingState[userId];
};

// –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
const getRandomMotivation = (gameMode, party, language, heroTranslations) => {
  let motivation;
  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∞–∑—É –∏–∑ gameModes –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  if (motivations.gameModes[gameMode]) {
    const modeMotivations = motivations.gameModes[gameMode];
    motivation = modeMotivations[Math.floor(Math.random() * modeMotivations.length)];
  } else {
    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º general
    motivation = motivations.general[Math.floor(Math.random() * motivations.general.length)];
  }
  return motivation;
};

module.exports = {
  clearGlobalStates,

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
  formatDateTime: (date, language) => {
    const pad = (num) => String(num).padStart(2, '0');
    const day = pad(date.getDate());
    const month = pad(date.getMonth() + 1);
    const year = date.getFullYear();
    const hours = pad(date.getHours());
    const minutes = pad(date.getMinutes());
    return language === 'RU'
        ? `${day}.${month}.${year} ${hours}:${minutes}`
        : `${month}/${day}/${year} ${hours}:${minutes}`;
  },

  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∫–∏ –ø–æ–ª–µ–π –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
  getFieldLabels: (language) => language === 'RU' ? {
    nickname: '–ù–∏–∫–Ω–µ–π–º',
    userId: 'ID –∏–≥—Ä–æ–∫–∞',
    trophies: '–¢—Ä–æ—Ñ–µ–∏',
    valorPath: '–ü—É—Ç—å –¥–æ–±–ª–µ—Å—Ç–∏',
    syndicate: '–°–∏–Ω–¥–∏–∫–∞—Ç',
    name: '–ò–º—è',
    age: '–í–æ–∑—Ä–∞—Å—Ç',
    gender: '–ü–æ–ª',
    country: '–°—Ç—Ä–∞–Ω–∞',
    city: '–ì–æ—Ä–æ–¥'
  } : {
    nickname: 'Nickname',
    userId: 'User ID',
    trophies: 'Trophies',
    valorPath: 'Valor Path',
    syndicate: 'Syndicate',
    name: 'Name',
    age: 'Age',
    gender: 'Gender',
    country: 'Country',
    city: 'City'
  },

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  formatProfileText: (user, language) => {
    const isRU = language === 'RU';
    const fieldLabels = module.exports.getFieldLabels(language);
    const normalizeGender = (gender) => {
      if (!gender) return null;
      const lowerGender = gender.toLowerCase().trim();
      if (['male', 'm', '–º—É–∂—Å–∫–æ–π', '–º'].includes(lowerGender)) return 'male';
      if (['female', 'f', '–∂–µ–Ω—Å–∫–∏–π', '–∂'].includes(lowerGender)) return 'female';
      return lowerGender;
    };
    console.log(`Processing gender for userId=${user.telegramId}: raw=${user.gender}, normalized=${normalizeGender(user.gender)}`);
    const genderMap = { male: isRU ? '–ú' : 'M', female: isRU ? '–ñ' : 'F' };
    const normalizedGender = normalizeGender(user.gender);
    const genderDisplay = genderMap[normalizedGender] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    return [
      `${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}, ${genderDisplay}, ${user.age || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ${isRU ? '–ª–µ—Ç' : 'years'}`,
      `${user.country || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}, ${user.city || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
      `Telegram: ${user.telegramUsername || user.telegramId}`,
      `${fieldLabels.nickname}: ${user.nickname || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
      `${fieldLabels.userId}: <code>${user.userId || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code>`,
      `${fieldLabels.trophies}: ${user.trophies || 0}`,
      `${fieldLabels.valorPath}: ${user.valorPath || (isRU ? '–ù–µ —É–∫–∞–∑–∞–Ω–æ' : 'Not specified')}`,
      `${fieldLabels.syndicate}: ${user.syndicate || (isRU ? '–ù–µ —É–∫–∞–∑–∞–Ω–æ' : 'Not specified')}`
    ].join('\n');
  },

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤
  formatHeroesText: (heroes, classId, heroTranslations, language, formatPercentage) => {
    let heroText = language === 'RU'
        ? `–ö–ª–∞—Å—Å: ${heroTranslations[classId]?.classNames?.[language] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å'}\n\n`
        : `Class: ${heroTranslations[classId]?.classNames?.[language] || 'Unknown class'}\n\n`;
    if (heroes.length === 0) {
      heroText += language === 'RU' ? '–£ –≤–∞—Å –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞.' : 'You have no heroes of this class.';
    } else {
      heroText += heroes.map((hero, index) => {
        const heroName = heroTranslations[classId]?.heroes?.[hero.heroId]?.[language] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–µ—Ä–æ–π';
        const updatedAt = module.exports.formatDateTime(new Date(hero.updatedAt), language);
        const level = hero.level ?? 0;
        const strength = hero.strength ?? 0;
        const winPercentageValue = hero.winPercentage ?? 0;
        const winPercentage = language === 'RU'
            ? (formatPercentage(winPercentageValue) || '0').replace('.', ',')
            : formatPercentage(winPercentageValue) || '0';
        const stats = language === 'RU'
            ? `${hero.isPrimary ? '‚≠ê ' : ''}ü¶∏ ${heroName} —É—Ä. ${level}, ‚úä ${strength}, ‚öîÔ∏è ${winPercentage}%\n` +
            `–ë–∏—Ç–≤—ã/–£–±–∏—Ç–æ/–í–æ—Å–∫—Ä.: ${hero.battlesPlayed ?? 0}/${hero.heroesKilled ?? 0}/${hero.heroesRevived ?? 0}\n\n` +
            `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedAt}`
            : `${hero.isPrimary ? '‚≠ê ' : ''}ü¶∏ ${heroName} lvl. ${level}, ‚úä ${strength}, ‚öîÔ∏è ${winPercentage}%\n` +
            `Battles/Killed/Rev.: ${hero.battlesPlayed ?? 0}/${hero.heroesKilled ?? 0}/${hero.heroesRevived ?? 0}\n\n` +
            `Updated: ${updatedAt}`;
        return stats + (index < heroes.length - 1 ? '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' : '');
      }).join('');
    }
    return heroText || (language === 'RU' ? '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–µ—Ä–æ—è—Ö.' : 'No hero data available.');
  },

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  handleError: async (ctx, error, language = 'RU') => {
    console.error('Error:', error.stack);
    try {
      await ctx.reply(
          language === 'RU' ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.' : '‚ùå An error occurred.',
          { reply_markup: { keyboard: getMainReplyKeyboard(language).keyboard, resize_keyboard: true } }
      );
    } catch (replyError) {
      console.error('Failed to send error message:', replyError.stack);
      await ctx.reply(language === 'RU' ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.' : '‚ùå An error occurred.');
    }
  },

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ –≤ –ø–∞—Ç–∏
  formatPartyMessage: async (party, language, groupChatId, heroTranslations) => {
    const isRU = language === 'RU';
    const organizer = await User.findOne({ telegramId: party.organizerId }).lean();
    const organizerHero = await Hero.findOne({ userId: party.organizerId, heroId: party.heroId }).lean();
    const heroData = heroTranslations[organizerHero?.classId || party.classId]?.heroes[party.heroId];
    const heroName = heroData ? heroData[language] : `Unknown Hero (ID: ${party.heroId})`;
    const nickname = organizer.nickname || 'Unknown';
    const acceptedMembers = party.applications.filter(app => app.status === 'accepted');
    const currentCount = 1 + acceptedMembers.length;
    const totalCount = party.playerCount || 2;

    console.log(`Formatting party message: partyId=${party._id}, currentCount=${currentCount}, totalCount=${totalCount}`);

    let messageText = isRU
        ? `‚ö†Ô∏è –ù–∞–±–æ—Ä –≤ –ø–∞—Ç–∏ ${party.gameMode}\n–°–æ–±—Ä–∞–Ω–æ ${currentCount} –∏–∑ ${totalCount}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n`
        : `‚ö†Ô∏è Recruiting for party ${party.gameMode}\nCollected ${currentCount} out of ${totalCount}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n`;

    const winPercentage = isRU
        ? (organizerHero?.winPercentage || 0).toFixed(2).replace('.', ',')
        : (organizerHero?.winPercentage || 0).toFixed(2);
    messageText += `1. ${nickname} | <code>${organizer.userId || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code> | üèÜ ${organizer.trophies || 0}\n`;
    messageText += `ü¶∏ ${heroName} (${isRU ? '—É—Ä.' : 'lvl.'} ${organizerHero?.level || 0}, ‚úä ${organizerHero?.strength || 0}, ‚öîÔ∏è ${winPercentage}%)\n`;

    if (acceptedMembers.length > 0) {
      const members = await Promise.all(
          acceptedMembers.map(async (app, index) => {
            const user = await User.findOne({ telegramId: app.applicantId }).lean();
            let hero = await Hero.findOne({ userId: app.applicantId, heroId: app.heroId }).lean();
            if (!hero) {
              hero = { heroId: app.heroId, classId: app.classId || party.classId, level: 0, strength: 0, winPercentage: 0 };
              console.warn(`Hero not found for userId=${app.applicantId}, heroId=${app.heroId}, using default values`);
            }
            return [user, hero, index];
          })
      );

      members.forEach(([user, hero, index]) => {
        const heroData = heroTranslations[hero.classId]?.heroes[hero.heroId];
        const heroName = heroData ? heroData[language] : `Unknown Hero (ID: ${hero.heroId})`;
        const winPercentage = isRU
            ? (hero.winPercentage || 0).toFixed(2).replace('.', ',')
            : (hero.winPercentage || 0).toFixed(2);
        const nickname = user.nickname || 'Unknown';
        messageText += `\n${index + 2}. ${nickname} | <code>${user.userId || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code> | üèÜ ${user.trophies || 0}\n`;
        messageText += `ü¶∏ ${heroName} (${isRU ? '—É—Ä.' : 'lvl.'} ${hero.level}, ‚úä ${hero.strength}, ‚öîÔ∏è ${winPercentage}%)\n`;
      });
    }

    return messageText;
  },

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ç–∏
  formatCompletedPartyMessage: async (party, language, groupChatId, heroTranslations) => {
    const isRU = language === 'RU';
    const organizer = await User.findOne({ telegramId: party.organizerId }).lean();
    const organizerHero = await Hero.findOne({ userId: party.organizerId, heroId: party.heroId }).lean();
    const heroData = heroTranslations[organizerHero?.classId || party.classId]?.heroes[party.heroId];
    const heroName = heroData ? heroData[language] : `Unknown Hero (ID: ${party.heroId})`;
    const nickname = organizer.nickname || 'Unknown';
    const acceptedMembers = party.applications.filter(app => app.status === 'accepted');

    console.log(`Formatting completed party message: partyId=${party._id}, acceptedMembers=${acceptedMembers.length}`);

    // –ü–æ–ª—É—á–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
    const motivation = getRandomMotivation(party.gameMode, party, language, heroTranslations);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –º–æ—Ç–∏–≤–∞ikƒÖ —Ñ—Ä–∞–∑—É –∫–∞–∫ —Ü–∏—Ç–∞—Ç—É
    let messageText = isRU
        ? `‚úÖ –ü–∞—Ç–∏ –Ω–∞ ${party.gameMode} —Å–æ–±—Ä–∞–Ω–∞!\n\n`
        : `‚úÖ Party for ${party.gameMode} is complete!\n\n`;
    messageText += `<blockquote>${motivation}</blockquote>\n\n`;

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    const winPercentage = isRU
        ? (organizerHero?.winPercentage || 0).toFixed(2).replace('.', ',')
        : (organizerHero?.winPercentage || 0).toFixed(2);
    messageText += `1. ${nickname} | <code>${organizer.userId || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code> | üèÜ ${organizer.trophies || 0}\n`;
    messageText += `ü¶∏ ${heroName} (${isRU ? '—É—Ä.' : 'lvl.'} ${organizerHero?.level || 0}, ‚úä ${organizerHero?.strength || 0}, ‚öîÔ∏è ${winPercentage}%)\n`;

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∏–Ω—è—Ç—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (acceptedMembers.length > 0) {
      const members = await Promise.all(
          acceptedMembers.map(async (app, index) => {
            const user = await User.findOne({ telegramId: app.applicantId }).lean();
            let hero = await Hero.findOne({ userId: app.applicantId, heroId: app.heroId }).lean();
            if (!hero) {
              hero = { heroId: app.heroId, classId: app.classId || party.classId, level: 0, strength: 0, winPercentage: 0 };
              console.warn(`Hero not found for userId=${app.applicantId}, heroId=${app.heroId}, using default values`);
            }
            return [user, hero, index];
          })
      );

      members.forEach(([user, hero, index]) => {
        const heroData = heroTranslations[hero.classId]?.heroes[hero.heroId];
        const heroName = heroData ? heroData[language] : `Unknown Hero (ID: ${hero.heroId})`;
        const winPercentage = isRU
            ? (hero.winPercentage || 0).toFixed(2).replace('.', ',')
            : (hero.winPercentage || 0).toFixed(2);
        const nickname = user.nickname || 'Unknown';
        messageText += `\n${index + 2}. ${nickname} | <code>${user.userId || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code> | üèÜ ${user.trophies || 0}\n`;
        messageText += `ü¶∏ ${heroName} (${isRU ? '—É—Ä.' : 'lvl.'} ${hero.level}, ‚úä ${hero.strength}, ‚öîÔ∏è ${winPercentage}%)\n`;
      });
    }

    return messageText;
  },

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –Ω–∞ –ø–∞—Ç–∏
  formatApplicationMessage: async (user, hero, heroTranslations, language, appliedAt) => {
    const isRU = language === 'RU';
    const profileText = module.exports.formatProfileText(user, language);
    const heroData = heroTranslations[hero?.classId]?.heroes[hero.heroId];
    const heroName = heroData ? heroData[language] : `Unknown Hero (ID: ${hero.heroId})`;
    const winPercentage = isRU
        ? (hero?.winPercentage || 0).toFixed(2).replace('.', ',')
        : (hero?.winPercentage || 0).toFixed(2);
    const updatedAt = module.exports.formatDateTime(new Date(appliedAt || hero?.updatedAt || Date.now()), language);
    const heroText = [
      `ü¶∏ ${heroName} (${isRU ? '—É—Ä.' : 'lvl.'} ${hero?.level || 0}, ‚úä ${hero?.strength || 0}, ‚öîÔ∏è ${winPercentage}%)`,
      `${isRU ? '–ë–∏—Ç–≤—ã/–£–±–∏—Ç–æ/–í–æ—Å–∫—Ä' : 'Battles/Killed/Rev'}.: ${hero?.battlesPlayed || 0}/${hero?.heroesKilled || 0}/${hero?.heroesRevived || 0}`,
      `${isRU ? '–û–±–Ω–æ–≤–ª–µ–Ω–æ' : 'Updated'}: ${updatedAt}`
    ].join('\n');
    return [
      `${isRU ? '‚ö†Ô∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∞—à—É –ø–∞—Ç–∏' : '‚ö†Ô∏è New application for your party'}`,
      '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ',
      profileText,
      '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ',
      heroText
    ].join('\n');
  },

  getRandomMotivation
};